schema {
  query: query
  mutation: mutation
}

input BetweenOperatorInt {
  from: Int!
  to: Int!
  not: Boolean = false
}

input EqualOperatorInt {
  value: Int!
  not: Boolean = false
}

input GreaterOperatorInt {
  value: Int!
  not: Boolean = false
}

input GreaterOrEqualOperatorInt {
  value: Int!
  not: Boolean = false
}

input InOperatorInt {
  values: [Int!]!
  not: Boolean = false
}

input LessOperatorInt {
  value: Int!
  not: Boolean = false
}

input LessOrEqualOperatorInt {
  value: Int!
  not: Boolean = false
}

input LikeOperatorInt {
  value: Int!
  not: Boolean = false
}

# Logical operator to be used in conditions
enum LogicalOperator {
  AND
  OR
}

# To be used as a filter for objects of type `ModelWithTraits`
input ModelWithTraitsFilter {
  # Optional joins to either filter the query or fetch related objects from DB in a single query
  joins: ModelWithTraitsFilterJoins
  conditions: [ModelWithTraitsFilterCondition!]
}

# Type to specify conditions to filter `ModelWithTraits`
input ModelWithTraitsFilterCondition {
  # The logic operator to be used to append this condition
  conditionLogic: LogicalOperator = AND

  # The logic operator to be used within all fields below
  fieldsLogic: LogicalOperator = AND

  # Fields on which we want to apply a condition
  fields: ModelWithTraitsFilterConditionFields
}

# Type to specify a condition on a specific field
input ModelWithTraitsFilterConditionFieldCustomFromTrait {
  search: SearchOperatorString
}

# Type to specify a condition on a specific field
input ModelWithTraitsFilterConditionFieldId {
  between: BetweenOperatorInt
  equal: EqualOperatorInt
  greater: GreaterOperatorInt
  greaterOrEqual: GreaterOrEqualOperatorInt
  in: InOperatorInt
  less: LessOperatorInt
  lessOrEqual: LessOrEqualOperatorInt
  like: LikeOperatorInt
  null: NullOperatorInt
}

# Type to specify conditions on fields
input ModelWithTraitsFilterConditionFields {
  id: ModelWithTraitsFilterConditionFieldId
  customFromTrait: ModelWithTraitsFilterConditionFieldCustomFromTrait
}

# Type to specify join tables in a filter
input ModelWithTraitsFilterJoins {

}

input NullOperatorInt {
  not: Boolean = false
}

input SearchOperatorString {
  term: String!
}

type mutation {
  defaultField: ModelWithTraitsFilter
}

type query {

}
