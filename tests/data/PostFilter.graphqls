schema {
  query: query
  mutation: mutation
}

input BetweenOperatorBoolean {
  from: Boolean!
  to: Boolean!
  not: Boolean = false
}

input BetweenOperatorDateTime {
  from: DateTime!
  to: DateTime!
  not: Boolean = false
}

input BetweenOperatorID {
  from: ID!
  to: ID!
  not: Boolean = false
}

input BetweenOperatorString {
  from: String!
  to: String!
  not: Boolean = false
}

scalar DateTime

"""
When used on single valued association, it will use `IS NULL` operator. On
collection valued association it will use `IS EMPTY` operator.
"""
input EmptyOperatorID {
  not: Boolean = false
}

input EqualOperatorBoolean {
  value: Boolean!
  not: Boolean = false
}

input EqualOperatorDateTime {
  value: DateTime!
  not: Boolean = false
}

input EqualOperatorID {
  value: ID!
  not: Boolean = false
}

input EqualOperatorString {
  value: String!
  not: Boolean = false
}

input GreaterOperatorBoolean {
  value: Boolean!
  not: Boolean = false
}

input GreaterOperatorDateTime {
  value: DateTime!
  not: Boolean = false
}

input GreaterOperatorID {
  value: ID!
  not: Boolean = false
}

input GreaterOperatorString {
  value: String!
  not: Boolean = false
}

input GreaterOrEqualOperatorBoolean {
  value: Boolean!
  not: Boolean = false
}

input GreaterOrEqualOperatorDateTime {
  value: DateTime!
  not: Boolean = false
}

input GreaterOrEqualOperatorID {
  value: ID!
  not: Boolean = false
}

input GreaterOrEqualOperatorString {
  value: String!
  not: Boolean = false
}

"""
Will apply a `GROUP BY` on the field to select unique values existing in database.

This is typically useful to present a list of suggestions to the end-user, while
still allowing him to enter arbitrary values.
"""
input GroupOperatorBoolean {
  """This field is never used and can be ignored"""
  value: Boolean = null
}

"""
Will apply a `GROUP BY` on the field to select unique values existing in database.

This is typically useful to present a list of suggestions to the end-user, while
still allowing him to enter arbitrary values.
"""
input GroupOperatorDateTime {
  """This field is never used and can be ignored"""
  value: Boolean = null
}

"""
Will apply a `GROUP BY` on the field to select unique values existing in database.

This is typically useful to present a list of suggestions to the end-user, while
still allowing him to enter arbitrary values.
"""
input GroupOperatorID {
  """This field is never used and can be ignored"""
  value: Boolean = null
}

"""
Will apply a `GROUP BY` on the field to select unique values existing in database.

This is typically useful to present a list of suggestions to the end-user, while
still allowing him to enter arbitrary values.
"""
input GroupOperatorString {
  """This field is never used and can be ignored"""
  value: Boolean = null
}

"""
When used on single valued association, it will use `IN` operator. On collection
valued association it will use `MEMBER OF` operator.
"""
input HaveOperatorID {
  values: [ID!]!
  not: Boolean = false
}

input InOperatorBoolean {
  values: [Boolean!]!
  not: Boolean = false
}

input InOperatorDateTime {
  values: [DateTime!]!
  not: Boolean = false
}

input InOperatorID {
  values: [ID!]!
  not: Boolean = false
}

input InOperatorString {
  values: [String!]!
  not: Boolean = false
}

input JoinOnPost {
  type: JoinType = innerJoin

  """
  Optional joins to either filter the query or fetch related objects from DB in a single query
  """
  joins: PostFilterGroupJoin

  """Conditions to be applied on fields"""
  conditions: [PostFilterGroupCondition!]
}

input JoinOnUser {
  type: JoinType = innerJoin

  """
  Optional joins to either filter the query or fetch related objects from DB in a single query
  """
  joins: UserFilterGroupJoin

  """Conditions to be applied on fields"""
  conditions: [UserFilterGroupCondition!]
}

"""Join types to be used in DQL"""
enum JoinType {
  innerJoin
  leftJoin
}

input LessOperatorBoolean {
  value: Boolean!
  not: Boolean = false
}

input LessOperatorDateTime {
  value: DateTime!
  not: Boolean = false
}

input LessOperatorID {
  value: ID!
  not: Boolean = false
}

input LessOperatorString {
  value: String!
  not: Boolean = false
}

input LessOrEqualOperatorBoolean {
  value: Boolean!
  not: Boolean = false
}

input LessOrEqualOperatorDateTime {
  value: DateTime!
  not: Boolean = false
}

input LessOrEqualOperatorID {
  value: ID!
  not: Boolean = false
}

input LessOrEqualOperatorString {
  value: String!
  not: Boolean = false
}

input LikeOperatorBoolean {
  value: Boolean!
  not: Boolean = false
}

input LikeOperatorDateTime {
  value: DateTime!
  not: Boolean = false
}

input LikeOperatorID {
  value: ID!
  not: Boolean = false
}

input LikeOperatorString {
  value: String!
  not: Boolean = false
}

"""Logical operator to be used in conditions"""
enum LogicalOperator {
  AND
  OR
}

input ModuloOperatorInt {
  value: Int!
}

input NullOperatorBoolean {
  not: Boolean = false
}

input NullOperatorDateTime {
  not: Boolean = false
}

input NullOperatorID {
  not: Boolean = false
}

input NullOperatorString {
  not: Boolean = false
}

"""To be used as a filter for objects of type `Post`"""
input PostFilter {
  groups: [PostFilterGroup!]
}

"""Specify a set of joins and conditions to filter `Post`"""
input PostFilterGroup {
  """The logic operator to be used to append this group"""
  groupLogic: LogicalOperator = AND

  """The logic operator to be used within all conditions in this group"""
  conditionsLogic: LogicalOperator = AND

  """
  Optional joins to either filter the query or fetch related objects from DB in a single query
  """
  joins: PostFilterGroupJoin

  """Conditions to be applied on fields"""
  conditions: [PostFilterGroupCondition!]
}

"""Type to specify conditions on fields"""
input PostFilterGroupCondition {
  creationDate: PostFilterGroupConditionCreationDate
  title: PostFilterGroupConditionTitle
  body: PostFilterGroupConditionBody
  publicationDate: PostFilterGroupConditionPublicationDate
  status: PostFilterGroupConditionStatus
  id: PostFilterGroupConditionId
  user: PostFilterGroupConditionUser
  custom: PostFilterGroupConditionCustom
}

"""Type to specify a condition on a specific field"""
input PostFilterGroupConditionBody {
  between: BetweenOperatorString
  equal: EqualOperatorString
  greater: GreaterOperatorString
  greaterOrEqual: GreaterOrEqualOperatorString
  in: InOperatorString
  less: LessOperatorString
  lessOrEqual: LessOrEqualOperatorString
  like: LikeOperatorString
  null: NullOperatorString
  group: GroupOperatorString
}

"""Type to specify a condition on a specific field"""
input PostFilterGroupConditionCreationDate {
  between: BetweenOperatorDateTime
  equal: EqualOperatorDateTime
  greater: GreaterOperatorDateTime
  greaterOrEqual: GreaterOrEqualOperatorDateTime
  in: InOperatorDateTime
  less: LessOperatorDateTime
  lessOrEqual: LessOrEqualOperatorDateTime
  like: LikeOperatorDateTime
  null: NullOperatorDateTime
  group: GroupOperatorDateTime
}

"""Type to specify a condition on a specific field"""
input PostFilterGroupConditionCustom {
  search: SearchOperatorString
}

"""Type to specify a condition on a specific field"""
input PostFilterGroupConditionId {
  between: BetweenOperatorID
  equal: EqualOperatorID
  greater: GreaterOperatorID
  greaterOrEqual: GreaterOrEqualOperatorID
  in: InOperatorID
  less: LessOperatorID
  lessOrEqual: LessOrEqualOperatorID
  like: LikeOperatorID
  null: NullOperatorID
  group: GroupOperatorID
  modulo: ModuloOperatorInt
}

"""Type to specify a condition on a specific field"""
input PostFilterGroupConditionPublicationDate {
  between: BetweenOperatorDateTime
  equal: EqualOperatorDateTime
  greater: GreaterOperatorDateTime
  greaterOrEqual: GreaterOrEqualOperatorDateTime
  in: InOperatorDateTime
  less: LessOperatorDateTime
  lessOrEqual: LessOrEqualOperatorDateTime
  like: LikeOperatorDateTime
  null: NullOperatorDateTime
  group: GroupOperatorDateTime
}

"""Type to specify a condition on a specific field"""
input PostFilterGroupConditionStatus {
  between: BetweenOperatorString
  equal: EqualOperatorString
  greater: GreaterOperatorString
  greaterOrEqual: GreaterOrEqualOperatorString
  in: InOperatorString
  less: LessOperatorString
  lessOrEqual: LessOrEqualOperatorString
  like: LikeOperatorString
  null: NullOperatorString
  group: GroupOperatorString
}

"""Type to specify a condition on a specific field"""
input PostFilterGroupConditionTitle {
  between: BetweenOperatorString
  equal: EqualOperatorString
  greater: GreaterOperatorString
  greaterOrEqual: GreaterOrEqualOperatorString
  in: InOperatorString
  less: LessOperatorString
  lessOrEqual: LessOrEqualOperatorString
  like: LikeOperatorString
  null: NullOperatorString
  group: GroupOperatorString
}

"""Type to specify a condition on a specific field"""
input PostFilterGroupConditionUser {
  have: HaveOperatorID
  empty: EmptyOperatorID
  between: BetweenOperatorID
  equal: EqualOperatorID
  greater: GreaterOperatorID
  greaterOrEqual: GreaterOrEqualOperatorID
  in: InOperatorID
  less: LessOperatorID
  lessOrEqual: LessOrEqualOperatorID
  like: LikeOperatorID
  null: NullOperatorID
  group: GroupOperatorID
}

"""Type to specify join tables in a filter"""
input PostFilterGroupJoin {
  user: JoinOnUser
}

input SearchOperatorString {
  term: String!
}

"""Type to specify conditions on fields"""
input UserFilterGroupCondition {
  creationDate: UserFilterGroupConditionCreationDate
  name: UserFilterGroupConditionName
  email: UserFilterGroupConditionEmail
  password: UserFilterGroupConditionPassword
  isAdministrator: UserFilterGroupConditionIsAdministrator
  id: UserFilterGroupConditionId
  posts: UserFilterGroupConditionPosts
  manager: UserFilterGroupConditionManager
}

"""Type to specify a condition on a specific field"""
input UserFilterGroupConditionCreationDate {
  between: BetweenOperatorDateTime
  equal: EqualOperatorDateTime
  greater: GreaterOperatorDateTime
  greaterOrEqual: GreaterOrEqualOperatorDateTime
  in: InOperatorDateTime
  less: LessOperatorDateTime
  lessOrEqual: LessOrEqualOperatorDateTime
  like: LikeOperatorDateTime
  null: NullOperatorDateTime
  group: GroupOperatorDateTime
}

"""Type to specify a condition on a specific field"""
input UserFilterGroupConditionEmail {
  between: BetweenOperatorString
  equal: EqualOperatorString
  greater: GreaterOperatorString
  greaterOrEqual: GreaterOrEqualOperatorString
  in: InOperatorString
  less: LessOperatorString
  lessOrEqual: LessOrEqualOperatorString
  like: LikeOperatorString
  null: NullOperatorString
  group: GroupOperatorString
}

"""Type to specify a condition on a specific field"""
input UserFilterGroupConditionId {
  between: BetweenOperatorID
  equal: EqualOperatorID
  greater: GreaterOperatorID
  greaterOrEqual: GreaterOrEqualOperatorID
  in: InOperatorID
  less: LessOperatorID
  lessOrEqual: LessOrEqualOperatorID
  like: LikeOperatorID
  null: NullOperatorID
  group: GroupOperatorID
  modulo: ModuloOperatorInt
}

"""Type to specify a condition on a specific field"""
input UserFilterGroupConditionIsAdministrator {
  between: BetweenOperatorBoolean
  equal: EqualOperatorBoolean
  greater: GreaterOperatorBoolean
  greaterOrEqual: GreaterOrEqualOperatorBoolean
  in: InOperatorBoolean
  less: LessOperatorBoolean
  lessOrEqual: LessOrEqualOperatorBoolean
  like: LikeOperatorBoolean
  null: NullOperatorBoolean
  group: GroupOperatorBoolean
}

"""Type to specify a condition on a specific field"""
input UserFilterGroupConditionManager {
  have: HaveOperatorID
  empty: EmptyOperatorID
  between: BetweenOperatorID
  equal: EqualOperatorID
  greater: GreaterOperatorID
  greaterOrEqual: GreaterOrEqualOperatorID
  in: InOperatorID
  less: LessOperatorID
  lessOrEqual: LessOrEqualOperatorID
  like: LikeOperatorID
  null: NullOperatorID
  group: GroupOperatorID
}

"""Type to specify a condition on a specific field"""
input UserFilterGroupConditionName {
  between: BetweenOperatorString
  equal: EqualOperatorString
  greater: GreaterOperatorString
  greaterOrEqual: GreaterOrEqualOperatorString
  in: InOperatorString
  less: LessOperatorString
  lessOrEqual: LessOrEqualOperatorString
  like: LikeOperatorString
  null: NullOperatorString
  group: GroupOperatorString
}

"""Type to specify a condition on a specific field"""
input UserFilterGroupConditionPassword {
  between: BetweenOperatorString
  equal: EqualOperatorString
  greater: GreaterOperatorString
  greaterOrEqual: GreaterOrEqualOperatorString
  in: InOperatorString
  less: LessOperatorString
  lessOrEqual: LessOrEqualOperatorString
  like: LikeOperatorString
  null: NullOperatorString
  group: GroupOperatorString
}

"""Type to specify a condition on a specific field"""
input UserFilterGroupConditionPosts {
  have: HaveOperatorID
  empty: EmptyOperatorID
}

"""Type to specify join tables in a filter"""
input UserFilterGroupJoin {
  posts: JoinOnPost
  manager: JoinOnUser
}

type mutation {
  defaultField: PostFilter
}

type query {

}
